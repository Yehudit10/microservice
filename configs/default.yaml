

# video: "D:/p9.mp4"
#"C:/Users/yehud/Downloads/cars.mp4"
fit: "1280x720"          # or null to keep native
roi: "0,0;1,0;1,1;0,1"   # normalized polygon; or "full"
change_thresh: 0
min_blob_area: 200
morph_open: 3
show_mask: false

# used to construct clickable HLS URLs inside alerts
media_base: "http://media-proxy:8080"   # or your public host
media_auth_token: "CHANGE_ME"

alertmanager:
  base_url: "http://alertmanager:9093"
  timeout: 3.0


video:
  bucket: imagery
  prefix: security/incidents
  fps: 9
  hls_segment_time: 0.5
  hls_list_size: 4000
  hls_use_cmaf: False
  draw_thickness: 3

logging:
  level: "INFO"          # DEBUG|INFO|WARNING|ERROR
  file: null             # e.g., "agguard.log"

# detector:
#   weights: "yolov8n.pt"
#   conf: 0.6
#   imgsz: 640
#   device: "cpu"             # or "cpu"
#   roi_pad: 16
detector:
  backend: "onnx"
  onnx: "weights/yolov8n.onnx"    # we copied it here at build-time
  conf: 0.4
  imgsz: 640
  roi_pad: 16
  names:
    1: animal          # <- add at least the classes you route
    2: person
    # 2: car
    # 7: truck
    # 14: bird
    # 15: cat
    # 16: dog
    # 17: horse
    # 18: sheep
    # 21: bear
    
  # optional speed knobs:
  # roi_long_cap: 640
  # iou: 0.45
  # max_det: 100



tracker:
  iou_thresh: 0.2
  max_miss: 20
  ema: 0.8
  min_hits: 5
  high_conf: 0.6
  appearance_alpha: 0.8
  center_blend: 0.15

# specialists:
#   - for_class: "person"
#     dotted_path: "agguard.specialists.mask_classifier.FaceMaskClassifier"
#     kwargs:
#       model_path: "/app/weights/best.pt"
#       imgsz: 320
#       conf_thresh: 0.25
#       iou_thresh: 0.45
#       device: "cpu"
specialists:
  # - for_class: "person"
  #   grpc:
  #     address: "mask-classifier:50061"
  #     kind: "mask"
  #     timeout_sec: 1.5
  # - for_class: "person"
  #   grpc:
  #     address: "anomalies-classifier:50062"
  #     kind: "mask"
  #     timeout_sec: 5
  - for_class: "animal"
    grpc:
      address: "anomalies-classifier:50062"
      kind: "anomalies"
      timeout_sec: 5

  # - for_class: "bear"
  #   grpc:
  #     kind: "clip"
  #     address: "anomalies-classifier:50062"
  #     timeout_sec: 5

  # - for_class: "bird"
  #   grpc:
  #     kind: "clip"
  #     address: "anomalies-classifier:50062"
  #     timeout_sec: 5
  # - for_class: "cat"
  #   grpc:
  #     kind: "clip"
  #     address: "anomalies-classifier:50062"
  #     timeout_sec: 5
    # dotted_path: "agguard.specialists.mask_classifier.FaceMaskClassifier"
    # kwargs:
    #   model_path: "/app/weights/mask_yolov8.onnx"
    #   backend: "onnx"
    #   imgsz: 224
    #   class_names: ["no_mask", "mask"]   # required for ONNX
    #   device: "cpu"                      # ignored by onnxruntime CPU


  
kafka:
  # everything here is passed directly to confluent_kafka.Consumer(...)
  bootstrap.servers: "localhost:9094"
  group.id: "agguard-security"
  enable.auto.commit: true
  auto.offset.reset: "latest"
  # SASL example (optional):
  # security.protocol: "SASL_PLAINTEXT"
  # sasl.mechanism: "SCRAM-SHA-256"
    # sasl.username: "user"
    # sasl.password: "pass"

  topic: "imagery.frames"   # <-- only this is read by us (not a Consumer property)

minio:
  endpoint: "localhost:9001"
  access_key: "minioadmin"
  secret_key: "minioadmin123"
  secure: false
  default_bucket: "imagery"

s3:
  # For AWS: set only region_name; credentials come from env/role by default
  # endpoint_url: "http://127.0.0.1:9001"
  endpoint_url: "http://host.docker.internal:9001"
  region_name: "us-east-1"
  aws_access_key_id: "minioadmin"
  aws_secret_access_key: "minioadmin123"
  # Optional explicit creds (leave unset to use IAM role / env):
  # aws_access_key_id: "AKIA..."
  # aws_secret_access_key: "..."
  # aws_session_token: "..."

  # Usually omit for AWS; set only when talking to a custom S3-compatible endpoint
  # endpoint_url: "https://s3.amazonaws.com"      # default if omitted
  # endpoint_url: "http://127.0.0.1:9000"         # example: local S3-compatible

  default_bucket: "imagery"
  connect_timeout: 3.0
  read_timeout: 10.0
  max_attempts: 3
# api:
#   # base_url: "http://localhost:8080/api"
#   base_url: "http://host.docker.internal:8080/api"
#   token: "dev-token"

api:
  base_url: "http://host.docker.internal:8001/api"
  default_mission_id: 123
  # One of the following two:
  service_token: c63577e2-5f20-443c-b264-bdc101d3d186   # ← recommended in prod
  # dev_bootstrap: true                      # ← only if server ENV=dev
  # dev_service_name: "ingestor"
  timeout_sec: 15
